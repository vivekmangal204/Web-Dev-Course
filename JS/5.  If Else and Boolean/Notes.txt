-----> What are Booleans ?
1. Datatype : Booleans are a Basic data type in javascript.
2. Two values : Can only be true or false.
3. 'true' is a String not a Booleans

-----> Comparison Operators
< > <= >= == !=
Equality
== check value Equality
=== check value and type Equality
Inequality
!= check value Equality
!== check value and type Equality
Relational
>   Greater Than
<   Less Than
>=  Greater than or equal to.
<=  Less than or equal to.
Order of comparison is less than arithmetic operators.

-----> If - else
1. syntax :
if(condition)
{
    //code;
}
2. Wha is if: Executes block if condition is true, skips if false.
3. What is else : Excecutes a block when the if condition is false.
4. Curly Braces can be omitted for single statements, but not recommended.
5. If-else ladder : Multiple if and else if blocks ; only one Executes
6. Use Variables : Can store coditions in variables for use in if statements.

-----> Logical Operators
1. Types : && (And), ||(OR), !(Not)
2. And (&&) : All conditions must be true for the result to be true.
3. OR (||) : Only one codition must be true for the result to be true.
4. Not(!) : Inverts the Boolean value of a codition.
5. Lower Priority than Math and comparison Operators.

-----> Scope
1. Any Variable created inside {} will remain inside {}.
2. variable can be redefined inside {}
3. var does not follow scope
4. Global scope : Accessible everywhere in the code.
5. Block scope : Limited to a block mainly with let and const.
6. Declare variables in the narrowest scope possible.

-----> Truthy and Falsy values
1. Falsy Values : 0, null, undefined, false, NaN, ""(empty string)
2. Truthy values : all Values not listed as falsy.
3. Used in conditional statements like if.
4. Non-boolean values are auto-converted in logical operations.
5. Be explicit in comparisons to avoid unexpected.

-----> If alternatives
1. Ternary Operator : Condition ? trueValue : falseValue
Quick one-line if-else
2. Guard Operator : value || defaultValue
use when a fallback value is needed.
3. Default Operator : value ?? fallbackValue
use when you want to consider only null and  undefined as falsy.
4. Simplifies conditional logic.
5. Use wisely to maintain readability.